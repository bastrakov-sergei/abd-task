// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using WebApp.Data;

namespace WebApp.Data.Migrations.ApplicationDbContextMigrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20180525103116_RemoveSourceProperty")]
    partial class RemoveSourceProperty
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WebApp.Models.DataFiles.DataFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("Content")
                        .IsRequired();

                    b.Property<byte[]>("Hash");

                    b.Property<bool>("IsProcessed");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.HasIndex("Hash")
                        .IsUnique()
                        .HasFilter("[Hash] IS NOT NULL");

                    b.ToTable("DataFiles");
                });

            modelBuilder.Entity("WebApp.Models.TradePoints.ATM", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("ATMs");
                });

            modelBuilder.Entity("WebApp.Models.TradePoints.ATMSource", b =>
                {
                    b.Property<Guid>("TradePointSourceId");

                    b.Property<string>("DataFileType");

                    b.Property<Guid?>("TradePointId");

                    b.HasKey("TradePointSourceId", "DataFileType");

                    b.HasIndex("TradePointId");

                    b.ToTable("ATMSources");
                });

            modelBuilder.Entity("WebApp.Models.TradePoints.InfoKiosk", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("InfoKiosks");
                });

            modelBuilder.Entity("WebApp.Models.TradePoints.InfoKioskSource", b =>
                {
                    b.Property<Guid>("TradePointSourceId");

                    b.Property<string>("DataFileType");

                    b.Property<Guid?>("TradePointId");

                    b.HasKey("TradePointSourceId", "DataFileType");

                    b.HasIndex("TradePointId");

                    b.ToTable("InfoKioskSources");
                });

            modelBuilder.Entity("WebApp.Models.TradePoints.Office", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Offices");
                });

            modelBuilder.Entity("WebApp.Models.TradePoints.OfficeSource", b =>
                {
                    b.Property<Guid>("TradePointSourceId");

                    b.Property<string>("DataFileType");

                    b.Property<Guid?>("TradePointId");

                    b.HasKey("TradePointSourceId", "DataFileType");

                    b.HasIndex("TradePointId");

                    b.ToTable("OfficeSources");
                });

            modelBuilder.Entity("WebApp.Models.TradePoints.ATM", b =>
                {
                    b.OwnsOne("WebApp.Models.TradePoints.Location", "Location", b1 =>
                        {
                            b1.Property<Guid>("ATMId");

                            b1.Property<double>("Latitude")
                                .HasColumnName("Latitude");

                            b1.Property<double>("Longitude")
                                .HasColumnName("Longitude");

                            b1.ToTable("ATMs");

                            b1.HasOne("WebApp.Models.TradePoints.ATM")
                                .WithOne("Location")
                                .HasForeignKey("WebApp.Models.TradePoints.Location", "ATMId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("WebApp.Models.TradePoints.ATMSource", b =>
                {
                    b.HasOne("WebApp.Models.TradePoints.ATM", "TradePoint")
                        .WithMany()
                        .HasForeignKey("TradePointId");
                });

            modelBuilder.Entity("WebApp.Models.TradePoints.InfoKiosk", b =>
                {
                    b.OwnsOne("WebApp.Models.TradePoints.Location", "Location", b1 =>
                        {
                            b1.Property<Guid?>("InfoKioskId");

                            b1.Property<double>("Latitude")
                                .HasColumnName("Latitude");

                            b1.Property<double>("Longitude")
                                .HasColumnName("Longitude");

                            b1.ToTable("InfoKiosks");

                            b1.HasOne("WebApp.Models.TradePoints.InfoKiosk")
                                .WithOne("Location")
                                .HasForeignKey("WebApp.Models.TradePoints.Location", "InfoKioskId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("WebApp.Models.TradePoints.InfoKioskSource", b =>
                {
                    b.HasOne("WebApp.Models.TradePoints.InfoKiosk", "TradePoint")
                        .WithMany()
                        .HasForeignKey("TradePointId");
                });

            modelBuilder.Entity("WebApp.Models.TradePoints.Office", b =>
                {
                    b.OwnsOne("WebApp.Models.TradePoints.Location", "Location", b1 =>
                        {
                            b1.Property<Guid?>("OfficeId");

                            b1.Property<double>("Latitude")
                                .HasColumnName("Latitude");

                            b1.Property<double>("Longitude")
                                .HasColumnName("Longitude");

                            b1.ToTable("Offices");

                            b1.HasOne("WebApp.Models.TradePoints.Office")
                                .WithOne("Location")
                                .HasForeignKey("WebApp.Models.TradePoints.Location", "OfficeId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("WebApp.Models.TradePoints.OfficeSource", b =>
                {
                    b.HasOne("WebApp.Models.TradePoints.Office", "TradePoint")
                        .WithMany()
                        .HasForeignKey("TradePointId");
                });
#pragma warning restore 612, 618
        }
    }
}
